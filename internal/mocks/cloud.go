package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// Cloud is an autogenerated mock type for the cloud type
type Cloud struct {
	mock.Mock
}

// GetInstanceAddresses provides a mock function with given fields: instanceName
func (_m *Cloud) GetInstanceAddresses(ctx context.Context, instanceName string) ([]net.IP, error) {
	ret := _m.Called(instanceName)

	var r0 []net.IP
	if rf, ok := ret.Get(0).(func(string) []net.IP); ok {
		r0 = rf(instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IP)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCloud interface {
	mock.TestingT
	Cleanup(func())
}

// NewCloud creates a new instance of Cloud. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCloud(t mockConstructorTestingTNewCloud) *Cloud {
	mock := &Cloud{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
