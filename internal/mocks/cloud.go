// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// Cloud is an autogenerated mock type for the cloud type
type Cloud struct {
	mock.Mock
}

type Cloud_Expecter struct {
	mock *mock.Mock
}

func (_m *Cloud) EXPECT() *Cloud_Expecter {
	return &Cloud_Expecter{mock: &_m.Mock}
}

// GetInstanceAddresses provides a mock function with given fields: instanceName
func (_m *Cloud) GetInstanceAddresses(ctx context.Context, instanceName string) ([]net.IP, error) {
	ret := _m.Called(instanceName)

	var r0 []net.IP
	if rf, ok := ret.Get(0).(func( string) []net.IP); ok {
		r0 = rf(instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IP)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func( string) error); ok {
		r1 = rf(instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cloud_GetInstanceAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceAddresses'
type Cloud_GetInstanceAddresses_Call struct {
	*mock.Call
}

// GetInstanceAddresses is a helper method to define mock.On call
//   - ctx context.Context
//   - instanceName string
func (_e *Cloud_Expecter) GetInstanceAddresses(ctx interface{}, instanceName interface{}) *Cloud_GetInstanceAddresses_Call {
	return &Cloud_GetInstanceAddresses_Call{Call: _e.mock.On("GetInstanceAddresses", instanceName)}
}

func (_c *Cloud_GetInstanceAddresses_Call) Run(run func(ctx context.Context, instanceName string)) *Cloud_GetInstanceAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cloud_GetInstanceAddresses_Call) Return(_a0 []net.IP, _a1 error) *Cloud_GetInstanceAddresses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCloud interface {
	mock.TestingT
	Cleanup(func())
}

// NewCloud creates a new instance of Cloud. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCloud(t mockConstructorTestingTNewCloud) *Cloud {
	mock := &Cloud{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
