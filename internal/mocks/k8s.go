package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/certificates/v1"
)

// K8s is an autogenerated mock type for the k8s type
type K8s struct {
	mock.Mock
}

// Approve provides a mock function with given fields: r
func (_m *K8s) Approve(ctx context.Context, r *v1.CertificateSigningRequest) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.CertificateSigningRequest) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CertificateSigningRequestsChan provides a mock function with given fields:
func (_m *K8s) CertificateSigningRequestsChan() (<-chan *v1.CertificateSigningRequest, error) {
	ret := _m.Called()

	var r0 <-chan *v1.CertificateSigningRequest
	if rf, ok := ret.Get(0).(func() <-chan *v1.CertificateSigningRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *v1.CertificateSigningRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deny provides a mock function with given fields: r
func (_m *K8s) Deny(ctx context.Context, r *v1.CertificateSigningRequest) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.CertificateSigningRequest) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *K8s) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewK8s interface {
	mock.TestingT
	Cleanup(func())
}

// NewK8s creates a new instance of K8s. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewK8s(t mockConstructorTestingTNewK8s) *K8s {
	mock := &K8s{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
