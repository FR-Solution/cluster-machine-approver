// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	controller "github.com/fraima/cluster-machine-approver/internal/controller"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/certificates/v1"
)

// K8s is an autogenerated mock type for the k8s type
type K8s struct {
	mock.Mock
}

type K8s_Expecter struct {
	mock *mock.Mock
}

func (_m *K8s) EXPECT() *K8s_Expecter {
	return &K8s_Expecter{mock: &_m.Mock}
}

// Approve provides a mock function with given fields: r
func (_m *K8s) Approve(ctx context.Context, r *v1.CertificateSigningRequest) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.CertificateSigningRequest) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// K8s_Approve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Approve'
type K8s_Approve_Call struct {
	*mock.Call
}

// Approve is a helper method to define mock.On call
//   - ctx context.Context
//   - r *v1.CertificateSigningRequest
func (_e *K8s_Expecter) Approve(ctx interface{}, r interface{}) *K8s_Approve_Call {
	return &K8s_Approve_Call{Call: _e.mock.On("Approve", r)}
}

func (_c *K8s_Approve_Call) Run(run func(r *v1.CertificateSigningRequest)) *K8s_Approve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[1].(*v1.CertificateSigningRequest))
	})
	return _c
}

func (_c *K8s_Approve_Call) Return(_a0 error) *K8s_Approve_Call {
	_c.Call.Return(_a0)
	return _c
}

// CertificateSigningRequestsChan provides a mock function with given fields:
func (_m *K8s) CertificateSigningRequestsChan() (<-chan controller.Event, error) {
	ret := _m.Called()

	var r0 <-chan controller.Event
	if rf, ok := ret.Get(0).(func() <-chan controller.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan controller.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// K8s_CertificateSigningRequestsChan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificateSigningRequestsChan'
type K8s_CertificateSigningRequestsChan_Call struct {
	*mock.Call
}

// CertificateSigningRequestsChan is a helper method to define mock.On call
func (_e *K8s_Expecter) CertificateSigningRequestsChan() *K8s_CertificateSigningRequestsChan_Call {
	return &K8s_CertificateSigningRequestsChan_Call{Call: _e.mock.On("CertificateSigningRequestsChan")}
}

func (_c *K8s_CertificateSigningRequestsChan_Call) Run(run func()) *K8s_CertificateSigningRequestsChan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8s_CertificateSigningRequestsChan_Call) Return(_a0 <-chan controller.Event, _a1 error) *K8s_CertificateSigningRequestsChan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Deny provides a mock function with given fields: r
func (_m *K8s) Deny(ctx context.Context, r *v1.CertificateSigningRequest) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.CertificateSigningRequest) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// K8s_Deny_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deny'
type K8s_Deny_Call struct {
	*mock.Call
}

// Deny is a helper method to define mock.On call
//   - ctx context.Context
//   - r *v1.CertificateSigningRequest
func (_e *K8s_Expecter) Deny(ctx interface{}, r interface{}) *K8s_Deny_Call {
	return &K8s_Deny_Call{Call: _e.mock.On("Deny", r)}
}

func (_c *K8s_Deny_Call) Run(run func(r *v1.CertificateSigningRequest)) *K8s_Deny_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[1].(*v1.CertificateSigningRequest))
	})
	return _c
}

func (_c *K8s_Deny_Call) Return(_a0 error) *K8s_Deny_Call {
	_c.Call.Return(_a0)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *K8s) Stop() {
	_m.Called()
}

// K8s_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type K8s_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *K8s_Expecter) Stop() *K8s_Stop_Call {
	return &K8s_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *K8s_Stop_Call) Run(run func()) *K8s_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8s_Stop_Call) Return() *K8s_Stop_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewK8s interface {
	mock.TestingT
	Cleanup(func())
}

// NewK8s creates a new instance of K8s. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewK8s(t mockConstructorTestingTNewK8s) *K8s {
	mock := &K8s{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
